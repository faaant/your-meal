schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "dish"
"""
type dish {
  created_by: uuid!
  details: String!

  """An array relationship"""
  dish_ingredients(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): [dish_ingredients!]!

  """An aggregate relationship"""
  dish_ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): dish_ingredients_aggregate!
  grade: numeric
  id: uuid!
  is_published: Boolean!
  name: String!
  photo_url: String!

  """An array relationship"""
  schedules(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """An aggregate relationship"""
  schedules_aggregate(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): schedule_aggregate!

  """An array relationship"""
  user_dishes(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): [user_dishes!]!

  """An aggregate relationship"""
  user_dishes_aggregate(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): user_dishes_aggregate!
}

"""
aggregated selection of "dish"
"""
type dish_aggregate {
  aggregate: dish_aggregate_fields
  nodes: [dish!]!
}

"""
aggregate fields of "dish"
"""
type dish_aggregate_fields {
  avg: dish_avg_fields
  count(columns: [dish_select_column!], distinct: Boolean): Int!
  max: dish_max_fields
  min: dish_min_fields
  stddev: dish_stddev_fields
  stddev_pop: dish_stddev_pop_fields
  stddev_samp: dish_stddev_samp_fields
  sum: dish_sum_fields
  var_pop: dish_var_pop_fields
  var_samp: dish_var_samp_fields
  variance: dish_variance_fields
}

"""aggregate avg on columns"""
type dish_avg_fields {
  grade: Float
}

"""
Boolean expression to filter rows from the table "dish". All fields are combined with a logical 'AND'.
"""
input dish_bool_exp {
  _and: [dish_bool_exp!]
  _not: dish_bool_exp
  _or: [dish_bool_exp!]
  created_by: uuid_comparison_exp
  details: String_comparison_exp
  dish_ingredients: dish_ingredients_bool_exp
  dish_ingredients_aggregate: dish_ingredients_aggregate_bool_exp
  grade: numeric_comparison_exp
  id: uuid_comparison_exp
  is_published: Boolean_comparison_exp
  name: String_comparison_exp
  photo_url: String_comparison_exp
  schedules: schedule_bool_exp
  schedules_aggregate: schedule_aggregate_bool_exp
  user_dishes: user_dishes_bool_exp
  user_dishes_aggregate: user_dishes_aggregate_bool_exp
}

"""
unique or primary key constraints on table "dish"
"""
enum dish_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  dish_pkey
}

"""
input type for incrementing numeric columns in table "dish"
"""
input dish_inc_input {
  grade: numeric
}

"""
columns and relationships of "dish_ingredients"
"""
type dish_ingredients {
  amount: String!

  """An object relationship"""
  dish: dish!
  dish_id: uuid!
  id: uuid!

  """An object relationship"""
  ingredient: ingredients!
  ingredient_id: uuid!
  measurement_entity: String!
  type: String!
}

"""
aggregated selection of "dish_ingredients"
"""
type dish_ingredients_aggregate {
  aggregate: dish_ingredients_aggregate_fields
  nodes: [dish_ingredients!]!
}

input dish_ingredients_aggregate_bool_exp {
  count: dish_ingredients_aggregate_bool_exp_count
}

input dish_ingredients_aggregate_bool_exp_count {
  arguments: [dish_ingredients_select_column!]
  distinct: Boolean
  filter: dish_ingredients_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "dish_ingredients"
"""
type dish_ingredients_aggregate_fields {
  count(columns: [dish_ingredients_select_column!], distinct: Boolean): Int!
  max: dish_ingredients_max_fields
  min: dish_ingredients_min_fields
}

"""
order by aggregate values of table "dish_ingredients"
"""
input dish_ingredients_aggregate_order_by {
  count: order_by
  max: dish_ingredients_max_order_by
  min: dish_ingredients_min_order_by
}

"""
input type for inserting array relation for remote table "dish_ingredients"
"""
input dish_ingredients_arr_rel_insert_input {
  data: [dish_ingredients_insert_input!]!

  """upsert condition"""
  on_conflict: dish_ingredients_on_conflict
}

"""
Boolean expression to filter rows from the table "dish_ingredients". All fields are combined with a logical 'AND'.
"""
input dish_ingredients_bool_exp {
  _and: [dish_ingredients_bool_exp!]
  _not: dish_ingredients_bool_exp
  _or: [dish_ingredients_bool_exp!]
  amount: String_comparison_exp
  dish: dish_bool_exp
  dish_id: uuid_comparison_exp
  id: uuid_comparison_exp
  ingredient: ingredients_bool_exp
  ingredient_id: uuid_comparison_exp
  measurement_entity: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "dish_ingredients"
"""
enum dish_ingredients_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  dish_ingredients_id_key

  """
  unique or primary key constraint on columns "id"
  """
  dish_ingredients_pkey
}

"""
input type for inserting data into table "dish_ingredients"
"""
input dish_ingredients_insert_input {
  amount: String
  dish: dish_obj_rel_insert_input
  dish_id: uuid
  id: uuid
  ingredient: ingredients_obj_rel_insert_input
  ingredient_id: uuid
  measurement_entity: String
  type: String
}

"""aggregate max on columns"""
type dish_ingredients_max_fields {
  amount: String
  dish_id: uuid
  id: uuid
  ingredient_id: uuid
  measurement_entity: String
  type: String
}

"""
order by max() on columns of table "dish_ingredients"
"""
input dish_ingredients_max_order_by {
  amount: order_by
  dish_id: order_by
  id: order_by
  ingredient_id: order_by
  measurement_entity: order_by
  type: order_by
}

"""aggregate min on columns"""
type dish_ingredients_min_fields {
  amount: String
  dish_id: uuid
  id: uuid
  ingredient_id: uuid
  measurement_entity: String
  type: String
}

"""
order by min() on columns of table "dish_ingredients"
"""
input dish_ingredients_min_order_by {
  amount: order_by
  dish_id: order_by
  id: order_by
  ingredient_id: order_by
  measurement_entity: order_by
  type: order_by
}

"""
response of any mutation on the table "dish_ingredients"
"""
type dish_ingredients_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dish_ingredients!]!
}

"""
on_conflict condition type for table "dish_ingredients"
"""
input dish_ingredients_on_conflict {
  constraint: dish_ingredients_constraint!
  update_columns: [dish_ingredients_update_column!]! = []
  where: dish_ingredients_bool_exp
}

"""Ordering options when selecting data from "dish_ingredients"."""
input dish_ingredients_order_by {
  amount: order_by
  dish: dish_order_by
  dish_id: order_by
  id: order_by
  ingredient: ingredients_order_by
  ingredient_id: order_by
  measurement_entity: order_by
  type: order_by
}

"""primary key columns input for table: dish_ingredients"""
input dish_ingredients_pk_columns_input {
  id: uuid!
}

"""
select columns of table "dish_ingredients"
"""
enum dish_ingredients_select_column {
  """column name"""
  amount

  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  ingredient_id

  """column name"""
  measurement_entity

  """column name"""
  type
}

"""
input type for updating data in table "dish_ingredients"
"""
input dish_ingredients_set_input {
  amount: String
  dish_id: uuid
  id: uuid
  ingredient_id: uuid
  measurement_entity: String
  type: String
}

"""
Streaming cursor of the table "dish_ingredients"
"""
input dish_ingredients_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dish_ingredients_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dish_ingredients_stream_cursor_value_input {
  amount: String
  dish_id: uuid
  id: uuid
  ingredient_id: uuid
  measurement_entity: String
  type: String
}

"""
update columns of table "dish_ingredients"
"""
enum dish_ingredients_update_column {
  """column name"""
  amount

  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  ingredient_id

  """column name"""
  measurement_entity

  """column name"""
  type
}

input dish_ingredients_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: dish_ingredients_set_input

  """filter the rows which have to be updated"""
  where: dish_ingredients_bool_exp!
}

"""
input type for inserting data into table "dish"
"""
input dish_insert_input {
  created_by: uuid
  details: String
  dish_ingredients: dish_ingredients_arr_rel_insert_input
  grade: numeric
  id: uuid
  is_published: Boolean
  name: String
  photo_url: String
  schedules: schedule_arr_rel_insert_input
  user_dishes: user_dishes_arr_rel_insert_input
}

"""aggregate max on columns"""
type dish_max_fields {
  created_by: uuid
  details: String
  grade: numeric
  id: uuid
  name: String
  photo_url: String
}

"""aggregate min on columns"""
type dish_min_fields {
  created_by: uuid
  details: String
  grade: numeric
  id: uuid
  name: String
  photo_url: String
}

"""
response of any mutation on the table "dish"
"""
type dish_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [dish!]!
}

"""
input type for inserting object relation for remote table "dish"
"""
input dish_obj_rel_insert_input {
  data: dish_insert_input!

  """upsert condition"""
  on_conflict: dish_on_conflict
}

"""
on_conflict condition type for table "dish"
"""
input dish_on_conflict {
  constraint: dish_constraint!
  update_columns: [dish_update_column!]! = []
  where: dish_bool_exp
}

"""Ordering options when selecting data from "dish"."""
input dish_order_by {
  created_by: order_by
  details: order_by
  dish_ingredients_aggregate: dish_ingredients_aggregate_order_by
  grade: order_by
  id: order_by
  is_published: order_by
  name: order_by
  photo_url: order_by
  schedules_aggregate: schedule_aggregate_order_by
  user_dishes_aggregate: user_dishes_aggregate_order_by
}

"""primary key columns input for table: dish"""
input dish_pk_columns_input {
  id: uuid!
}

"""
select columns of table "dish"
"""
enum dish_select_column {
  """column name"""
  created_by

  """column name"""
  details

  """column name"""
  grade

  """column name"""
  id

  """column name"""
  is_published

  """column name"""
  name

  """column name"""
  photo_url
}

"""
input type for updating data in table "dish"
"""
input dish_set_input {
  created_by: uuid
  details: String
  grade: numeric
  id: uuid
  is_published: Boolean
  name: String
  photo_url: String
}

"""aggregate stddev on columns"""
type dish_stddev_fields {
  grade: Float
}

"""aggregate stddev_pop on columns"""
type dish_stddev_pop_fields {
  grade: Float
}

"""aggregate stddev_samp on columns"""
type dish_stddev_samp_fields {
  grade: Float
}

"""
Streaming cursor of the table "dish"
"""
input dish_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: dish_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input dish_stream_cursor_value_input {
  created_by: uuid
  details: String
  grade: numeric
  id: uuid
  is_published: Boolean
  name: String
  photo_url: String
}

"""aggregate sum on columns"""
type dish_sum_fields {
  grade: numeric
}

"""
update columns of table "dish"
"""
enum dish_update_column {
  """column name"""
  created_by

  """column name"""
  details

  """column name"""
  grade

  """column name"""
  id

  """column name"""
  is_published

  """column name"""
  name

  """column name"""
  photo_url
}

input dish_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: dish_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: dish_set_input

  """filter the rows which have to be updated"""
  where: dish_bool_exp!
}

"""aggregate var_pop on columns"""
type dish_var_pop_fields {
  grade: Float
}

"""aggregate var_samp on columns"""
type dish_var_samp_fields {
  grade: Float
}

"""aggregate variance on columns"""
type dish_variance_fields {
  grade: Float
}

"""
columns and relationships of "ingredients"
"""
type ingredients {
  """An array relationship"""
  dish_ingredients(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): [dish_ingredients!]!

  """An aggregate relationship"""
  dish_ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): dish_ingredients_aggregate!
  id: uuid!
  name: String!
  photo_url: String

  """An array relationship"""
  user_alergens(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): [user_alergens!]!

  """An aggregate relationship"""
  user_alergens_aggregate(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): user_alergens_aggregate!
}

"""
aggregated selection of "ingredients"
"""
type ingredients_aggregate {
  aggregate: ingredients_aggregate_fields
  nodes: [ingredients!]!
}

"""
aggregate fields of "ingredients"
"""
type ingredients_aggregate_fields {
  count(columns: [ingredients_select_column!], distinct: Boolean): Int!
  max: ingredients_max_fields
  min: ingredients_min_fields
}

"""
Boolean expression to filter rows from the table "ingredients". All fields are combined with a logical 'AND'.
"""
input ingredients_bool_exp {
  _and: [ingredients_bool_exp!]
  _not: ingredients_bool_exp
  _or: [ingredients_bool_exp!]
  dish_ingredients: dish_ingredients_bool_exp
  dish_ingredients_aggregate: dish_ingredients_aggregate_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  photo_url: String_comparison_exp
  user_alergens: user_alergens_bool_exp
  user_alergens_aggregate: user_alergens_aggregate_bool_exp
}

"""
unique or primary key constraints on table "ingredients"
"""
enum ingredients_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  ingredients_pkey
}

"""
input type for inserting data into table "ingredients"
"""
input ingredients_insert_input {
  dish_ingredients: dish_ingredients_arr_rel_insert_input
  id: uuid
  name: String
  photo_url: String
  user_alergens: user_alergens_arr_rel_insert_input
}

"""aggregate max on columns"""
type ingredients_max_fields {
  id: uuid
  name: String
  photo_url: String
}

"""aggregate min on columns"""
type ingredients_min_fields {
  id: uuid
  name: String
  photo_url: String
}

"""
response of any mutation on the table "ingredients"
"""
type ingredients_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ingredients!]!
}

"""
input type for inserting object relation for remote table "ingredients"
"""
input ingredients_obj_rel_insert_input {
  data: ingredients_insert_input!

  """upsert condition"""
  on_conflict: ingredients_on_conflict
}

"""
on_conflict condition type for table "ingredients"
"""
input ingredients_on_conflict {
  constraint: ingredients_constraint!
  update_columns: [ingredients_update_column!]! = []
  where: ingredients_bool_exp
}

"""Ordering options when selecting data from "ingredients"."""
input ingredients_order_by {
  dish_ingredients_aggregate: dish_ingredients_aggregate_order_by
  id: order_by
  name: order_by
  photo_url: order_by
  user_alergens_aggregate: user_alergens_aggregate_order_by
}

"""primary key columns input for table: ingredients"""
input ingredients_pk_columns_input {
  id: uuid!
}

"""
select columns of table "ingredients"
"""
enum ingredients_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  photo_url
}

"""
input type for updating data in table "ingredients"
"""
input ingredients_set_input {
  id: uuid
  name: String
  photo_url: String
}

"""
Streaming cursor of the table "ingredients"
"""
input ingredients_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ingredients_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ingredients_stream_cursor_value_input {
  id: uuid
  name: String
  photo_url: String
}

"""
update columns of table "ingredients"
"""
enum ingredients_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  photo_url
}

input ingredients_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: ingredients_set_input

  """filter the rows which have to be updated"""
  where: ingredients_bool_exp!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "dish"
  """
  delete_dish(
    """filter the rows which have to be deleted"""
    where: dish_bool_exp!
  ): dish_mutation_response

  """
  delete single row from the table: "dish"
  """
  delete_dish_by_pk(id: uuid!): dish

  """
  delete data from the table: "dish_ingredients"
  """
  delete_dish_ingredients(
    """filter the rows which have to be deleted"""
    where: dish_ingredients_bool_exp!
  ): dish_ingredients_mutation_response

  """
  delete single row from the table: "dish_ingredients"
  """
  delete_dish_ingredients_by_pk(id: uuid!): dish_ingredients

  """
  delete data from the table: "ingredients"
  """
  delete_ingredients(
    """filter the rows which have to be deleted"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  delete single row from the table: "ingredients"
  """
  delete_ingredients_by_pk(id: uuid!): ingredients

  """
  delete data from the table: "schedule"
  """
  delete_schedule(
    """filter the rows which have to be deleted"""
    where: schedule_bool_exp!
  ): schedule_mutation_response

  """
  delete single row from the table: "schedule"
  """
  delete_schedule_by_pk(id: uuid!): schedule

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete data from the table: "user_alergens"
  """
  delete_user_alergens(
    """filter the rows which have to be deleted"""
    where: user_alergens_bool_exp!
  ): user_alergens_mutation_response

  """
  delete single row from the table: "user_alergens"
  """
  delete_user_alergens_by_pk(ingredient_id: uuid!, user_id: uuid!): user_alergens

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: uuid!): user

  """
  delete data from the table: "user_dishes"
  """
  delete_user_dishes(
    """filter the rows which have to be deleted"""
    where: user_dishes_bool_exp!
  ): user_dishes_mutation_response

  """
  delete single row from the table: "user_dishes"
  """
  delete_user_dishes_by_pk(id: uuid!): user_dishes

  """
  insert data into the table: "dish"
  """
  insert_dish(
    """the rows to be inserted"""
    objects: [dish_insert_input!]!

    """upsert condition"""
    on_conflict: dish_on_conflict
  ): dish_mutation_response

  """
  insert data into the table: "dish_ingredients"
  """
  insert_dish_ingredients(
    """the rows to be inserted"""
    objects: [dish_ingredients_insert_input!]!

    """upsert condition"""
    on_conflict: dish_ingredients_on_conflict
  ): dish_ingredients_mutation_response

  """
  insert a single row into the table: "dish_ingredients"
  """
  insert_dish_ingredients_one(
    """the row to be inserted"""
    object: dish_ingredients_insert_input!

    """upsert condition"""
    on_conflict: dish_ingredients_on_conflict
  ): dish_ingredients

  """
  insert a single row into the table: "dish"
  """
  insert_dish_one(
    """the row to be inserted"""
    object: dish_insert_input!

    """upsert condition"""
    on_conflict: dish_on_conflict
  ): dish

  """
  insert data into the table: "ingredients"
  """
  insert_ingredients(
    """the rows to be inserted"""
    objects: [ingredients_insert_input!]!

    """upsert condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients_mutation_response

  """
  insert a single row into the table: "ingredients"
  """
  insert_ingredients_one(
    """the row to be inserted"""
    object: ingredients_insert_input!

    """upsert condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients

  """
  insert data into the table: "schedule"
  """
  insert_schedule(
    """the rows to be inserted"""
    objects: [schedule_insert_input!]!

    """upsert condition"""
    on_conflict: schedule_on_conflict
  ): schedule_mutation_response

  """
  insert a single row into the table: "schedule"
  """
  insert_schedule_one(
    """the row to be inserted"""
    object: schedule_insert_input!

    """upsert condition"""
    on_conflict: schedule_on_conflict
  ): schedule

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert data into the table: "user_alergens"
  """
  insert_user_alergens(
    """the rows to be inserted"""
    objects: [user_alergens_insert_input!]!

    """upsert condition"""
    on_conflict: user_alergens_on_conflict
  ): user_alergens_mutation_response

  """
  insert a single row into the table: "user_alergens"
  """
  insert_user_alergens_one(
    """the row to be inserted"""
    object: user_alergens_insert_input!

    """upsert condition"""
    on_conflict: user_alergens_on_conflict
  ): user_alergens

  """
  insert data into the table: "user_dishes"
  """
  insert_user_dishes(
    """the rows to be inserted"""
    objects: [user_dishes_insert_input!]!

    """upsert condition"""
    on_conflict: user_dishes_on_conflict
  ): user_dishes_mutation_response

  """
  insert a single row into the table: "user_dishes"
  """
  insert_user_dishes_one(
    """the row to be inserted"""
    object: user_dishes_insert_input!

    """upsert condition"""
    on_conflict: user_dishes_on_conflict
  ): user_dishes

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "dish"
  """
  update_dish(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dish_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dish_set_input

    """filter the rows which have to be updated"""
    where: dish_bool_exp!
  ): dish_mutation_response

  """
  update single row of the table: "dish"
  """
  update_dish_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: dish_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dish_set_input
    pk_columns: dish_pk_columns_input!
  ): dish

  """
  update data of the table: "dish_ingredients"
  """
  update_dish_ingredients(
    """sets the columns of the filtered rows to the given values"""
    _set: dish_ingredients_set_input

    """filter the rows which have to be updated"""
    where: dish_ingredients_bool_exp!
  ): dish_ingredients_mutation_response

  """
  update single row of the table: "dish_ingredients"
  """
  update_dish_ingredients_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: dish_ingredients_set_input
    pk_columns: dish_ingredients_pk_columns_input!
  ): dish_ingredients

  """
  update multiples rows of table: "dish_ingredients"
  """
  update_dish_ingredients_many(
    """updates to execute, in order"""
    updates: [dish_ingredients_updates!]!
  ): [dish_ingredients_mutation_response]

  """
  update multiples rows of table: "dish"
  """
  update_dish_many(
    """updates to execute, in order"""
    updates: [dish_updates!]!
  ): [dish_mutation_response]

  """
  update data of the table: "ingredients"
  """
  update_ingredients(
    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input

    """filter the rows which have to be updated"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  update single row of the table: "ingredients"
  """
  update_ingredients_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input
    pk_columns: ingredients_pk_columns_input!
  ): ingredients

  """
  update multiples rows of table: "ingredients"
  """
  update_ingredients_many(
    """updates to execute, in order"""
    updates: [ingredients_updates!]!
  ): [ingredients_mutation_response]

  """
  update data of the table: "schedule"
  """
  update_schedule(
    """increments the numeric columns with given value of the filtered values"""
    _inc: schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: schedule_set_input

    """filter the rows which have to be updated"""
    where: schedule_bool_exp!
  ): schedule_mutation_response

  """
  update single row of the table: "schedule"
  """
  update_schedule_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: schedule_set_input
    pk_columns: schedule_pk_columns_input!
  ): schedule

  """
  update multiples rows of table: "schedule"
  """
  update_schedule_many(
    """updates to execute, in order"""
    updates: [schedule_updates!]!
  ): [schedule_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update data of the table: "user_alergens"
  """
  update_user_alergens(
    """sets the columns of the filtered rows to the given values"""
    _set: user_alergens_set_input

    """filter the rows which have to be updated"""
    where: user_alergens_bool_exp!
  ): user_alergens_mutation_response

  """
  update single row of the table: "user_alergens"
  """
  update_user_alergens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_alergens_set_input
    pk_columns: user_alergens_pk_columns_input!
  ): user_alergens

  """
  update multiples rows of table: "user_alergens"
  """
  update_user_alergens_many(
    """updates to execute, in order"""
    updates: [user_alergens_updates!]!
  ): [user_alergens_mutation_response]

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update data of the table: "user_dishes"
  """
  update_user_dishes(
    """sets the columns of the filtered rows to the given values"""
    _set: user_dishes_set_input

    """filter the rows which have to be updated"""
    where: user_dishes_bool_exp!
  ): user_dishes_mutation_response

  """
  update single row of the table: "user_dishes"
  """
  update_user_dishes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_dishes_set_input
    pk_columns: user_dishes_pk_columns_input!
  ): user_dishes

  """
  update multiples rows of table: "user_dishes"
  """
  update_user_dishes_many(
    """updates to execute, in order"""
    updates: [user_dishes_updates!]!
  ): [user_dishes_mutation_response]

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "dish"
  """
  dish(
    """distinct select on columns"""
    distinct_on: [dish_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_order_by!]

    """filter the rows returned"""
    where: dish_bool_exp
  ): [dish!]!

  """
  fetch aggregated fields from the table: "dish"
  """
  dish_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_order_by!]

    """filter the rows returned"""
    where: dish_bool_exp
  ): dish_aggregate!

  """fetch data from the table: "dish" using primary key columns"""
  dish_by_pk(id: uuid!): dish

  """An array relationship"""
  dish_ingredients(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): [dish_ingredients!]!

  """An aggregate relationship"""
  dish_ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): dish_ingredients_aggregate!

  """
  fetch data from the table: "dish_ingredients" using primary key columns
  """
  dish_ingredients_by_pk(id: uuid!): dish_ingredients

  """
  fetch data from the table: "ingredients"
  """
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """
  fetch aggregated fields from the table: "ingredients"
  """
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!

  """fetch data from the table: "ingredients" using primary key columns"""
  ingredients_by_pk(id: uuid!): ingredients

  """
  fetch data from the table: "schedule"
  """
  schedule(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """
  fetch aggregated fields from the table: "schedule"
  """
  schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): schedule_aggregate!

  """fetch data from the table: "schedule" using primary key columns"""
  schedule_by_pk(id: uuid!): schedule

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """An array relationship"""
  user_alergens(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): [user_alergens!]!

  """An aggregate relationship"""
  user_alergens_aggregate(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): user_alergens_aggregate!

  """fetch data from the table: "user_alergens" using primary key columns"""
  user_alergens_by_pk(ingredient_id: uuid!, user_id: uuid!): user_alergens

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user

  """An array relationship"""
  user_dishes(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): [user_dishes!]!

  """An aggregate relationship"""
  user_dishes_aggregate(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): user_dishes_aggregate!

  """fetch data from the table: "user_dishes" using primary key columns"""
  user_dishes_by_pk(id: uuid!): user_dishes
}

"""
columns and relationships of "schedule"
"""
type schedule {
  day: String!

  """An object relationship"""
  dish: dish!
  dish_id: uuid!
  id: uuid!
  user_id: uuid!
  week_number: Int!
}

"""
aggregated selection of "schedule"
"""
type schedule_aggregate {
  aggregate: schedule_aggregate_fields
  nodes: [schedule!]!
}

input schedule_aggregate_bool_exp {
  count: schedule_aggregate_bool_exp_count
}

input schedule_aggregate_bool_exp_count {
  arguments: [schedule_select_column!]
  distinct: Boolean
  filter: schedule_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "schedule"
"""
type schedule_aggregate_fields {
  avg: schedule_avg_fields
  count(columns: [schedule_select_column!], distinct: Boolean): Int!
  max: schedule_max_fields
  min: schedule_min_fields
  stddev: schedule_stddev_fields
  stddev_pop: schedule_stddev_pop_fields
  stddev_samp: schedule_stddev_samp_fields
  sum: schedule_sum_fields
  var_pop: schedule_var_pop_fields
  var_samp: schedule_var_samp_fields
  variance: schedule_variance_fields
}

"""
order by aggregate values of table "schedule"
"""
input schedule_aggregate_order_by {
  avg: schedule_avg_order_by
  count: order_by
  max: schedule_max_order_by
  min: schedule_min_order_by
  stddev: schedule_stddev_order_by
  stddev_pop: schedule_stddev_pop_order_by
  stddev_samp: schedule_stddev_samp_order_by
  sum: schedule_sum_order_by
  var_pop: schedule_var_pop_order_by
  var_samp: schedule_var_samp_order_by
  variance: schedule_variance_order_by
}

"""
input type for inserting array relation for remote table "schedule"
"""
input schedule_arr_rel_insert_input {
  data: [schedule_insert_input!]!

  """upsert condition"""
  on_conflict: schedule_on_conflict
}

"""aggregate avg on columns"""
type schedule_avg_fields {
  week_number: Float
}

"""
order by avg() on columns of table "schedule"
"""
input schedule_avg_order_by {
  week_number: order_by
}

"""
Boolean expression to filter rows from the table "schedule". All fields are combined with a logical 'AND'.
"""
input schedule_bool_exp {
  _and: [schedule_bool_exp!]
  _not: schedule_bool_exp
  _or: [schedule_bool_exp!]
  day: String_comparison_exp
  dish: dish_bool_exp
  dish_id: uuid_comparison_exp
  id: uuid_comparison_exp
  user_id: uuid_comparison_exp
  week_number: Int_comparison_exp
}

"""
unique or primary key constraints on table "schedule"
"""
enum schedule_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  schedule_pkey
}

"""
input type for incrementing numeric columns in table "schedule"
"""
input schedule_inc_input {
  week_number: Int
}

"""
input type for inserting data into table "schedule"
"""
input schedule_insert_input {
  day: String
  dish: dish_obj_rel_insert_input
  dish_id: uuid
  id: uuid
  user_id: uuid
  week_number: Int
}

"""aggregate max on columns"""
type schedule_max_fields {
  day: String
  dish_id: uuid
  id: uuid
  user_id: uuid
  week_number: Int
}

"""
order by max() on columns of table "schedule"
"""
input schedule_max_order_by {
  day: order_by
  dish_id: order_by
  id: order_by
  user_id: order_by
  week_number: order_by
}

"""aggregate min on columns"""
type schedule_min_fields {
  day: String
  dish_id: uuid
  id: uuid
  user_id: uuid
  week_number: Int
}

"""
order by min() on columns of table "schedule"
"""
input schedule_min_order_by {
  day: order_by
  dish_id: order_by
  id: order_by
  user_id: order_by
  week_number: order_by
}

"""
response of any mutation on the table "schedule"
"""
type schedule_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [schedule!]!
}

"""
on_conflict condition type for table "schedule"
"""
input schedule_on_conflict {
  constraint: schedule_constraint!
  update_columns: [schedule_update_column!]! = []
  where: schedule_bool_exp
}

"""Ordering options when selecting data from "schedule"."""
input schedule_order_by {
  day: order_by
  dish: dish_order_by
  dish_id: order_by
  id: order_by
  user_id: order_by
  week_number: order_by
}

"""primary key columns input for table: schedule"""
input schedule_pk_columns_input {
  id: uuid!
}

"""
select columns of table "schedule"
"""
enum schedule_select_column {
  """column name"""
  day

  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  user_id

  """column name"""
  week_number
}

"""
input type for updating data in table "schedule"
"""
input schedule_set_input {
  day: String
  dish_id: uuid
  id: uuid
  user_id: uuid
  week_number: Int
}

"""aggregate stddev on columns"""
type schedule_stddev_fields {
  week_number: Float
}

"""
order by stddev() on columns of table "schedule"
"""
input schedule_stddev_order_by {
  week_number: order_by
}

"""aggregate stddev_pop on columns"""
type schedule_stddev_pop_fields {
  week_number: Float
}

"""
order by stddev_pop() on columns of table "schedule"
"""
input schedule_stddev_pop_order_by {
  week_number: order_by
}

"""aggregate stddev_samp on columns"""
type schedule_stddev_samp_fields {
  week_number: Float
}

"""
order by stddev_samp() on columns of table "schedule"
"""
input schedule_stddev_samp_order_by {
  week_number: order_by
}

"""
Streaming cursor of the table "schedule"
"""
input schedule_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: schedule_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input schedule_stream_cursor_value_input {
  day: String
  dish_id: uuid
  id: uuid
  user_id: uuid
  week_number: Int
}

"""aggregate sum on columns"""
type schedule_sum_fields {
  week_number: Int
}

"""
order by sum() on columns of table "schedule"
"""
input schedule_sum_order_by {
  week_number: order_by
}

"""
update columns of table "schedule"
"""
enum schedule_update_column {
  """column name"""
  day

  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  user_id

  """column name"""
  week_number
}

input schedule_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: schedule_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: schedule_set_input

  """filter the rows which have to be updated"""
  where: schedule_bool_exp!
}

"""aggregate var_pop on columns"""
type schedule_var_pop_fields {
  week_number: Float
}

"""
order by var_pop() on columns of table "schedule"
"""
input schedule_var_pop_order_by {
  week_number: order_by
}

"""aggregate var_samp on columns"""
type schedule_var_samp_fields {
  week_number: Float
}

"""
order by var_samp() on columns of table "schedule"
"""
input schedule_var_samp_order_by {
  week_number: order_by
}

"""aggregate variance on columns"""
type schedule_variance_fields {
  week_number: Float
}

"""
order by variance() on columns of table "schedule"
"""
input schedule_variance_order_by {
  week_number: order_by
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "dish"
  """
  dish(
    """distinct select on columns"""
    distinct_on: [dish_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_order_by!]

    """filter the rows returned"""
    where: dish_bool_exp
  ): [dish!]!

  """
  fetch aggregated fields from the table: "dish"
  """
  dish_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_order_by!]

    """filter the rows returned"""
    where: dish_bool_exp
  ): dish_aggregate!

  """fetch data from the table: "dish" using primary key columns"""
  dish_by_pk(id: uuid!): dish

  """An array relationship"""
  dish_ingredients(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): [dish_ingredients!]!

  """An aggregate relationship"""
  dish_ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [dish_ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dish_ingredients_order_by!]

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): dish_ingredients_aggregate!

  """
  fetch data from the table: "dish_ingredients" using primary key columns
  """
  dish_ingredients_by_pk(id: uuid!): dish_ingredients

  """
  fetch data from the table in a streaming manner: "dish_ingredients"
  """
  dish_ingredients_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dish_ingredients_stream_cursor_input]!

    """filter the rows returned"""
    where: dish_ingredients_bool_exp
  ): [dish_ingredients!]!

  """
  fetch data from the table in a streaming manner: "dish"
  """
  dish_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [dish_stream_cursor_input]!

    """filter the rows returned"""
    where: dish_bool_exp
  ): [dish!]!

  """
  fetch data from the table: "ingredients"
  """
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """
  fetch aggregated fields from the table: "ingredients"
  """
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!

  """fetch data from the table: "ingredients" using primary key columns"""
  ingredients_by_pk(id: uuid!): ingredients

  """
  fetch data from the table in a streaming manner: "ingredients"
  """
  ingredients_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ingredients_stream_cursor_input]!

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """
  fetch data from the table: "schedule"
  """
  schedule(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """
  fetch aggregated fields from the table: "schedule"
  """
  schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): schedule_aggregate!

  """fetch data from the table: "schedule" using primary key columns"""
  schedule_by_pk(id: uuid!): schedule

  """
  fetch data from the table in a streaming manner: "schedule"
  """
  schedule_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [schedule_stream_cursor_input]!

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """An array relationship"""
  user_alergens(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): [user_alergens!]!

  """An aggregate relationship"""
  user_alergens_aggregate(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): user_alergens_aggregate!

  """fetch data from the table: "user_alergens" using primary key columns"""
  user_alergens_by_pk(ingredient_id: uuid!, user_id: uuid!): user_alergens

  """
  fetch data from the table in a streaming manner: "user_alergens"
  """
  user_alergens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_alergens_stream_cursor_input]!

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): [user_alergens!]!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user

  """An array relationship"""
  user_dishes(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): [user_dishes!]!

  """An aggregate relationship"""
  user_dishes_aggregate(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): user_dishes_aggregate!

  """fetch data from the table: "user_dishes" using primary key columns"""
  user_dishes_by_pk(id: uuid!): user_dishes

  """
  fetch data from the table in a streaming manner: "user_dishes"
  """
  user_dishes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_dishes_stream_cursor_input]!

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): [user_dishes!]!

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

"""
columns and relationships of "user"
"""
type user {
  email: String!
  id: uuid!
  photo_url: String!

  """An array relationship"""
  user_alergens(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): [user_alergens!]!

  """An aggregate relationship"""
  user_alergens_aggregate(
    """distinct select on columns"""
    distinct_on: [user_alergens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_alergens_order_by!]

    """filter the rows returned"""
    where: user_alergens_bool_exp
  ): user_alergens_aggregate!

  """An array relationship"""
  user_dishes(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): [user_dishes!]!

  """An aggregate relationship"""
  user_dishes_aggregate(
    """distinct select on columns"""
    distinct_on: [user_dishes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_dishes_order_by!]

    """filter the rows returned"""
    where: user_dishes_bool_exp
  ): user_dishes_aggregate!
  username: String!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
columns and relationships of "user_alergens"
"""
type user_alergens {
  id: uuid!

  """An object relationship"""
  ingredient: ingredients!
  ingredient_id: uuid!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "user_alergens"
"""
type user_alergens_aggregate {
  aggregate: user_alergens_aggregate_fields
  nodes: [user_alergens!]!
}

input user_alergens_aggregate_bool_exp {
  count: user_alergens_aggregate_bool_exp_count
}

input user_alergens_aggregate_bool_exp_count {
  arguments: [user_alergens_select_column!]
  distinct: Boolean
  filter: user_alergens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_alergens"
"""
type user_alergens_aggregate_fields {
  count(columns: [user_alergens_select_column!], distinct: Boolean): Int!
  max: user_alergens_max_fields
  min: user_alergens_min_fields
}

"""
order by aggregate values of table "user_alergens"
"""
input user_alergens_aggregate_order_by {
  count: order_by
  max: user_alergens_max_order_by
  min: user_alergens_min_order_by
}

"""
input type for inserting array relation for remote table "user_alergens"
"""
input user_alergens_arr_rel_insert_input {
  data: [user_alergens_insert_input!]!

  """upsert condition"""
  on_conflict: user_alergens_on_conflict
}

"""
Boolean expression to filter rows from the table "user_alergens". All fields are combined with a logical 'AND'.
"""
input user_alergens_bool_exp {
  _and: [user_alergens_bool_exp!]
  _not: user_alergens_bool_exp
  _or: [user_alergens_bool_exp!]
  id: uuid_comparison_exp
  ingredient: ingredients_bool_exp
  ingredient_id: uuid_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_alergens"
"""
enum user_alergens_constraint {
  """
  unique or primary key constraint on columns "ingredient_id", "user_id"
  """
  user_alergens_pkey
}

"""
input type for inserting data into table "user_alergens"
"""
input user_alergens_insert_input {
  id: uuid
  ingredient: ingredients_obj_rel_insert_input
  ingredient_id: uuid
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_alergens_max_fields {
  id: uuid
  ingredient_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "user_alergens"
"""
input user_alergens_max_order_by {
  id: order_by
  ingredient_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_alergens_min_fields {
  id: uuid
  ingredient_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "user_alergens"
"""
input user_alergens_min_order_by {
  id: order_by
  ingredient_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_alergens"
"""
type user_alergens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_alergens!]!
}

"""
on_conflict condition type for table "user_alergens"
"""
input user_alergens_on_conflict {
  constraint: user_alergens_constraint!
  update_columns: [user_alergens_update_column!]! = []
  where: user_alergens_bool_exp
}

"""Ordering options when selecting data from "user_alergens"."""
input user_alergens_order_by {
  id: order_by
  ingredient: ingredients_order_by
  ingredient_id: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: user_alergens"""
input user_alergens_pk_columns_input {
  ingredient_id: uuid!
  user_id: uuid!
}

"""
select columns of table "user_alergens"
"""
enum user_alergens_select_column {
  """column name"""
  id

  """column name"""
  ingredient_id

  """column name"""
  user_id
}

"""
input type for updating data in table "user_alergens"
"""
input user_alergens_set_input {
  id: uuid
  ingredient_id: uuid
  user_id: uuid
}

"""
Streaming cursor of the table "user_alergens"
"""
input user_alergens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_alergens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_alergens_stream_cursor_value_input {
  id: uuid
  ingredient_id: uuid
  user_id: uuid
}

"""
update columns of table "user_alergens"
"""
enum user_alergens_update_column {
  """column name"""
  id

  """column name"""
  ingredient_id

  """column name"""
  user_id
}

input user_alergens_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_alergens_set_input

  """filter the rows which have to be updated"""
  where: user_alergens_bool_exp!
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  email: String_comparison_exp
  id: uuid_comparison_exp
  photo_url: String_comparison_exp
  user_alergens: user_alergens_bool_exp
  user_alergens_aggregate: user_alergens_aggregate_bool_exp
  user_dishes: user_dishes_bool_exp
  user_dishes_aggregate: user_dishes_aggregate_bool_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey
}

"""
columns and relationships of "user_dishes"
"""
type user_dishes {
  """An object relationship"""
  dish: dish!
  dish_id: uuid!
  id: uuid!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "user_dishes"
"""
type user_dishes_aggregate {
  aggregate: user_dishes_aggregate_fields
  nodes: [user_dishes!]!
}

input user_dishes_aggregate_bool_exp {
  count: user_dishes_aggregate_bool_exp_count
}

input user_dishes_aggregate_bool_exp_count {
  arguments: [user_dishes_select_column!]
  distinct: Boolean
  filter: user_dishes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_dishes"
"""
type user_dishes_aggregate_fields {
  count(columns: [user_dishes_select_column!], distinct: Boolean): Int!
  max: user_dishes_max_fields
  min: user_dishes_min_fields
}

"""
order by aggregate values of table "user_dishes"
"""
input user_dishes_aggregate_order_by {
  count: order_by
  max: user_dishes_max_order_by
  min: user_dishes_min_order_by
}

"""
input type for inserting array relation for remote table "user_dishes"
"""
input user_dishes_arr_rel_insert_input {
  data: [user_dishes_insert_input!]!

  """upsert condition"""
  on_conflict: user_dishes_on_conflict
}

"""
Boolean expression to filter rows from the table "user_dishes". All fields are combined with a logical 'AND'.
"""
input user_dishes_bool_exp {
  _and: [user_dishes_bool_exp!]
  _not: user_dishes_bool_exp
  _or: [user_dishes_bool_exp!]
  dish: dish_bool_exp
  dish_id: uuid_comparison_exp
  id: uuid_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_dishes"
"""
enum user_dishes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_dishes_id_key

  """
  unique or primary key constraint on columns "id"
  """
  user_dishes_pkey
}

"""
input type for inserting data into table "user_dishes"
"""
input user_dishes_insert_input {
  dish: dish_obj_rel_insert_input
  dish_id: uuid
  id: uuid
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_dishes_max_fields {
  dish_id: uuid
  id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "user_dishes"
"""
input user_dishes_max_order_by {
  dish_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_dishes_min_fields {
  dish_id: uuid
  id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "user_dishes"
"""
input user_dishes_min_order_by {
  dish_id: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_dishes"
"""
type user_dishes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_dishes!]!
}

"""
on_conflict condition type for table "user_dishes"
"""
input user_dishes_on_conflict {
  constraint: user_dishes_constraint!
  update_columns: [user_dishes_update_column!]! = []
  where: user_dishes_bool_exp
}

"""Ordering options when selecting data from "user_dishes"."""
input user_dishes_order_by {
  dish: dish_order_by
  dish_id: order_by
  id: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: user_dishes"""
input user_dishes_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_dishes"
"""
enum user_dishes_select_column {
  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  user_id
}

"""
input type for updating data in table "user_dishes"
"""
input user_dishes_set_input {
  dish_id: uuid
  id: uuid
  user_id: uuid
}

"""
Streaming cursor of the table "user_dishes"
"""
input user_dishes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_dishes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_dishes_stream_cursor_value_input {
  dish_id: uuid
  id: uuid
  user_id: uuid
}

"""
update columns of table "user_dishes"
"""
enum user_dishes_update_column {
  """column name"""
  dish_id

  """column name"""
  id

  """column name"""
  user_id
}

input user_dishes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_dishes_set_input

  """filter the rows which have to be updated"""
  where: user_dishes_bool_exp!
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  email: String
  id: uuid
  photo_url: String
  user_alergens: user_alergens_arr_rel_insert_input
  user_dishes: user_dishes_arr_rel_insert_input
  username: String
}

"""aggregate max on columns"""
type user_max_fields {
  email: String
  id: uuid
  photo_url: String
  username: String
}

"""aggregate min on columns"""
type user_min_fields {
  email: String
  id: uuid
  photo_url: String
  username: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  email: order_by
  id: order_by
  photo_url: order_by
  user_alergens_aggregate: user_alergens_aggregate_order_by
  user_dishes_aggregate: user_dishes_aggregate_order_by
  username: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  photo_url

  """column name"""
  username
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  email: String
  id: uuid
  photo_url: String
  username: String
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  email: String
  id: uuid
  photo_url: String
  username: String
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  photo_url

  """column name"""
  username
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

